// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/schemeScanner.flex

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Author: Gabriel S. Santiago <gabriel.santiago16@upr.edu                 *
 * August 2020                                                             *
 *                                                                         *
 * License: MIT                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**
	This is a JFlex scanner for the syntax of the Scheme programming language. (https://www.scheme.com/tspl2d/grammar.html)
*/

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class SchemeScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\3\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\2\23\6\24\2\25"+
    "\1\11\1\26\4\11\1\27\32\11\1\0\1\30\1\0"+
    "\2\11\1\12\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\2\11\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\11\1\54"+
    "\1\55\1\56\1\11\3\0\1\11\6\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\3\1\4\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\2\1\5\6\15"+
    "\1\16\1\17\3\4\1\17\1\0\1\20\1\0\1\21"+
    "\1\0\1\22\2\1\1\23\1\24\1\25\1\26\2\0"+
    "\1\26\1\0\1\26\1\0\1\27\1\30\1\31\1\12"+
    "\1\0\1\32\1\14\3\0\2\15\1\16\1\0\1\3"+
    "\1\15\2\4\1\15\1\0\1\15\1\30\1\4\3\15"+
    "\2\4\1\15\1\33\2\4\1\34\10\4\3\35\2\0"+
    "\1\36\3\0\1\37\3\0\1\40\2\0\1\41\1\26"+
    "\10\0\1\26\1\0\2\26\4\0\2\27\1\0\1\30"+
    "\1\0\1\30\2\0\1\42\1\4\1\32\5\0\1\32"+
    "\1\43\2\0\1\31\1\42\1\0\1\30\1\0\1\32"+
    "\1\0\1\32\1\4\1\42\1\43\1\0\3\4\1\34"+
    "\1\15\4\4\1\33\6\4\2\0\1\22\3\36\3\0"+
    "\1\1\1\0\4\37\4\0\1\24\1\25\3\40\3\0"+
    "\3\41\3\0\2\26\2\0\1\26\6\0\1\26\2\0"+
    "\3\26\2\0\1\26\2\0\1\26\2\0\1\26\1\0"+
    "\1\26\2\27\1\30\1\0\1\27\1\0\1\27\2\0"+
    "\1\31\7\0\1\32\1\43\2\31\1\0\1\42\1\0"+
    "\1\42\1\0\1\32\2\4\1\30\11\4\2\0\1\36"+
    "\2\0\1\36\1\0\1\36\2\37\2\0\1\37\2\0"+
    "\1\37\2\0\1\37\1\0\1\37\1\40\2\0\1\40"+
    "\1\0\1\40\1\41\2\0\1\41\1\0\1\41\3\0"+
    "\2\26\6\0\2\26\3\0\2\26\3\0\2\26\1\0"+
    "\1\26\4\0\3\26\2\0\1\27\1\30\1\27\2\0"+
    "\1\31\7\0\2\31\1\42\1\0\2\31\11\4\2\0"+
    "\1\36\2\0\2\36\1\0\2\37\1\0\1\37\4\0"+
    "\3\37\2\0\1\40\2\0\2\40\1\0\1\41\2\0"+
    "\2\41\3\0\1\26\2\0\1\26\1\0\2\26\2\0"+
    "\1\26\1\0\2\26\2\0\1\26\1\0\2\26\4\0"+
    "\2\26\1\0\1\26\1\0\1\31\2\0\1\31\1\42"+
    "\1\33\3\4\1\0\1\36\1\0\1\36\1\37\4\0"+
    "\2\37\1\0\1\37\1\40\1\0\1\40\1\41\1\0"+
    "\1\41\2\0\1\26\2\0\2\26\1\0\1\26\2\0"+
    "\2\26\1\0\1\26\2\0\2\26\2\0\1\26\3\4"+
    "\1\0\1\36\1\0\1\37\1\0\1\40\1\0\1\41"+
    "\1\0\1\26\1\0\2\26\1\0\2\26\1\0\1\26"+
    "\6\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[504];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\215\0\274\0\353\0\u011a"+
    "\0\57\0\57\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234"+
    "\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac"+
    "\0\u03db\0\u040a\0\u0439\0\u0468\0\274\0\57\0\u0497\0\57"+
    "\0\u04c6\0\u04f5\0\u0524\0\u0553\0\57\0\u0582\0\u05b1\0\u05e0"+
    "\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758"+
    "\0\57\0\u011a\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872"+
    "\0\u08a1\0\u08d0\0\57\0\u08ff\0\u0205\0\u092e\0\u095d\0\u098c"+
    "\0\u09bb\0\u09ea\0\u0a19\0\215\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5"+
    "\0\u0b04\0\u0b33\0\u0b62\0\215\0\u0b91\0\u0bc0\0\u0bc0\0\u0bef"+
    "\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\57"+
    "\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0"+
    "\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028"+
    "\0\57\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171"+
    "\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9"+
    "\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461"+
    "\0\u1490\0\57\0\57\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b"+
    "\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3"+
    "\0\57\0\u1722\0\u1751\0\u1780\0\u17af\0\u17de\0\215\0\u180d"+
    "\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985"+
    "\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd"+
    "\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8\0\57\0\u1c17\0\u1c46"+
    "\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\57\0\u1d60\0\u1d8f"+
    "\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\57"+
    "\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\57\0\u1ff2\0\u2021"+
    "\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199"+
    "\0\u066d\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284\0\u22b3\0\u22e2"+
    "\0\u2311\0\u2340\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u242b\0\u245a"+
    "\0\u2489\0\u24b8\0\u24e7\0\u2516\0\u2545\0\u2574\0\u25a3\0\u25d2"+
    "\0\u2601\0\u2630\0\u265f\0\u268e\0\u26bd\0\u26ec\0\u271b\0\u274a"+
    "\0\u2779\0\u27a8\0\u27d7\0\u2806\0\u2835\0\u2864\0\u2893\0\u28c2"+
    "\0\u28f1\0\u2920\0\u294f\0\u297e\0\u29ad\0\u29dc\0\u2a0b\0\u2a3a"+
    "\0\u2a69\0\u2a98\0\u2ac7\0\u2af6\0\u2b25\0\u2b54\0\u2b83\0\u2bb2"+
    "\0\u2be1\0\u2c10\0\u2c3f\0\u2c6e\0\u2c9d\0\u2ccc\0\u2cfb\0\u2d2a"+
    "\0\u2d59\0\u2d88\0\u2db7\0\u2de6\0\u2e15\0\u2e44\0\u2e73\0\u2ea2"+
    "\0\u2ed1\0\u2f00\0\u2f2f\0\u2f5e\0\u2f8d\0\u2fbc\0\u2feb\0\u301a"+
    "\0\u3049\0\u3078\0\u30a7\0\u30d6\0\u3105\0\u3134\0\u3163\0\u3192"+
    "\0\u31c1\0\u31f0\0\u321f\0\u324e\0\u327d\0\u32ac\0\u32db\0\u330a"+
    "\0\u3339\0\u3368\0\u3397\0\u33c6\0\u33f5\0\u3424\0\u3453\0\u3482"+
    "\0\u34b1\0\u34e0\0\u350f\0\u353e\0\u356d\0\u359c\0\u35cb\0\u35fa"+
    "\0\u3629\0\u3658\0\u3687\0\u36b6\0\u36e5\0\u3714\0\u3743\0\u3772"+
    "\0\u37a1\0\u37d0\0\u37ff\0\u382e\0\u385d\0\u388c\0\u38bb\0\u38ea"+
    "\0\u3919\0\u3948\0\u3977\0\u39a6\0\u39d5\0\u3a04\0\u3a33\0\u3a62"+
    "\0\u3a91\0\u3ac0\0\u3aef\0\u3b1e\0\u3b4d\0\u3b7c\0\u3bab\0\u3bda"+
    "\0\u3c09\0\u3c38\0\u3c09\0\u3c67\0\u3c96\0\u3cc5\0\u3cf4\0\u3d23"+
    "\0\u3d52\0\u3d81\0\u3db0\0\u3ddf\0\u3e0e\0\u3e3d\0\u3e6c\0\u3e9b"+
    "\0\u3eca\0\u3ef9\0\u3f28\0\u3f57\0\u3f86\0\u3fb5\0\u3fe4\0\u4013"+
    "\0\u4042\0\u4071\0\u40a0\0\u40cf\0\u40fe\0\u412d\0\u415c\0\u418b"+
    "\0\u41ba\0\u41e9\0\u4218\0\u4247\0\u4276\0\u42a5\0\u42d4\0\u4303"+
    "\0\u4332\0\u4361\0\u4390\0\u43bf\0\u43ee\0\u441d\0\u444c\0\u447b"+
    "\0\u44aa\0\u44d9\0\u4508\0\u4537\0\u4566\0\u4595\0\u45c4\0\u45f3"+
    "\0\u4622\0\u4651\0\u4680\0\u46af\0\u46de\0\u470d\0\u473c\0\u476b"+
    "\0\u479a\0\u47c9\0\u47f8\0\u4827\0\u4856\0\u4885\0\u48b4\0\u48e3"+
    "\0\u4912\0\u4912\0\u4941\0\u4970\0\u499f\0\u49ce\0\u49fd\0\u4a2c"+
    "\0\u4a5b\0\u4a8a\0\u4ab9\0\u4ae8\0\u4b17\0\u4b46\0\u4b75\0\u4ba4"+
    "\0\u4bd3\0\u4c02\0\u4c31\0\u4c60\0\u4c8f\0\u4cbe\0\u4ced\0\u4d1c"+
    "\0\u4d1c\0\u4d4b\0\u4d7a\0\u4da9\0\u4dd8\0\u4e07\0\u4e36\0\u4e65"+
    "\0\u4e94\0\u4ec3\0\u4ef2\0\u4f21\0\u4f50\0\u4f7f\0\u4fae\0\u4fdd"+
    "\0\u500c\0\u503b\0\u506a\0\u5099\0\u50c8\0\u50f7\0\u5126\0\u5155"+
    "\0\u5184\0\u51b3\0\u51e2\0\u5211\0\u5240\0\u526f\0\u529e\0\u52cd"+
    "\0\u52fc\0\u532b\0\u535a\0\u5389\0\u53b8\0\u53e7\0\u5416\0\u5445"+
    "\0\u5474\0\u54a3\0\u54d2\0\u5501\0\u5530\0\u555f\0\u558e\0\u55bd"+
    "\0\u55ec\0\u561b\0\u564a\0\u5679\0\u56a8\0\u56d7\0\u5706\0\u5735";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[504];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\5\1\10\1\11\1\12\1\5\1\13\1\14\1\13"+
    "\1\15\1\5\3\16\1\17\1\2\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\5\1\27\1\30\2\5"+
    "\1\31\1\32\1\33\1\5\1\34\5\5\61\0\1\3"+
    "\62\0\1\5\2\0\1\5\3\0\2\5\1\0\6\5"+
    "\3\0\26\5\7\35\1\36\20\35\1\37\26\35\13\0"+
    "\1\40\14\0\1\41\1\0\1\42\1\0\1\43\1\44"+
    "\1\45\2\0\1\44\3\0\1\46\4\0\1\45\2\0"+
    "\1\47\7\0\1\50\1\51\1\52\1\50\3\0\1\50"+
    "\1\53\1\0\1\53\1\54\1\50\3\55\3\0\26\50"+
    "\21\0\1\56\1\0\3\57\3\0\6\60\2\0\1\61"+
    "\23\0\1\50\1\51\1\52\1\50\3\0\1\50\1\53"+
    "\1\0\1\53\1\54\1\50\3\55\1\0\1\62\1\0"+
    "\26\50\21\0\1\63\1\0\3\64\41\0\1\65\5\0"+
    "\1\66\1\0\1\66\1\64\1\67\3\16\1\0\1\70"+
    "\1\0\3\71\3\72\2\0\1\73\1\74\6\0\1\74"+
    "\5\0\2\75\4\0\51\75\7\0\1\2\20\0\1\2"+
    "\34\0\1\5\1\0\1\76\1\5\3\0\1\5\1\77"+
    "\1\0\1\77\1\5\1\100\3\101\1\0\1\102\1\0"+
    "\1\101\1\103\4\101\2\5\1\104\2\5\1\105\12\5"+
    "\6\0\1\5\1\0\1\76\1\5\3\0\1\5\1\77"+
    "\1\0\1\77\1\5\1\100\3\101\1\0\1\102\1\0"+
    "\4\101\1\106\1\101\2\5\1\104\15\5\6\0\1\5"+
    "\1\0\1\76\1\5\3\0\1\5\1\77\1\0\1\77"+
    "\1\5\1\100\3\101\1\0\1\102\1\0\1\107\2\101"+
    "\1\110\2\101\2\5\1\104\3\5\1\111\11\5\6\0"+
    "\1\5\1\0\1\76\1\5\3\0\1\5\1\112\1\0"+
    "\1\112\1\5\1\100\3\101\1\0\1\102\1\0\4\101"+
    "\1\113\1\101\2\5\1\104\3\5\1\114\11\5\6\0"+
    "\1\5\1\0\1\76\1\5\3\0\1\5\1\112\1\0"+
    "\1\112\1\5\1\100\3\101\1\0\1\102\1\0\6\101"+
    "\2\5\1\104\15\5\6\0\1\5\1\0\1\76\1\5"+
    "\3\0\1\5\1\112\1\0\1\112\1\5\1\100\3\101"+
    "\1\0\1\102\1\0\6\101\2\5\1\104\3\5\1\115"+
    "\11\5\6\0\1\5\2\0\1\5\3\0\2\5\1\0"+
    "\6\5\3\0\5\5\1\114\20\5\6\0\1\5\2\0"+
    "\1\5\3\0\1\5\1\116\1\0\1\116\2\5\3\117"+
    "\3\0\1\120\3\5\1\121\3\5\1\122\15\5\6\0"+
    "\1\5\2\0\1\5\3\0\2\5\1\0\6\5\3\0"+
    "\17\5\1\114\6\5\6\0\1\5\2\0\1\5\3\0"+
    "\2\5\1\0\6\5\3\0\17\5\1\123\6\5\6\0"+
    "\1\5\2\0\1\5\3\0\2\5\1\0\6\5\3\0"+
    "\22\5\1\124\3\5\6\0\1\5\2\0\1\5\3\0"+
    "\1\5\1\116\1\0\1\116\2\5\3\117\3\0\4\5"+
    "\1\125\7\5\1\126\10\5\1\127\7\0\1\35\20\0"+
    "\1\35\26\0\2\130\4\0\36\130\1\131\4\130\1\132"+
    "\5\130\10\0\1\133\5\0\1\134\1\0\1\134\2\0"+
    "\1\135\43\0\1\136\5\0\1\137\1\0\1\137\1\140"+
    "\1\0\3\141\41\0\1\142\5\0\1\137\1\0\1\137"+
    "\1\140\1\0\3\141\41\0\1\143\5\0\1\144\1\0"+
    "\1\144\2\0\2\145\42\0\1\146\5\0\1\147\1\0"+
    "\1\147\2\0\3\150\3\0\6\150\26\0\1\50\2\0"+
    "\1\50\3\0\2\50\1\0\6\50\3\0\26\50\7\51"+
    "\1\151\20\51\1\152\26\51\30\0\1\153\1\0\1\154"+
    "\1\0\1\155\1\156\1\151\2\0\1\156\3\0\1\157"+
    "\4\0\1\151\2\0\1\160\22\0\1\161\1\0\3\162"+
    "\13\0\1\151\36\0\1\163\1\0\3\164\41\0\1\165"+
    "\5\0\1\166\1\0\1\166\1\164\1\167\3\55\1\0"+
    "\1\170\4\0\3\171\3\0\1\171\6\0\1\171\30\0"+
    "\3\172\41\0\1\173\5\0\1\66\1\0\1\66\1\172"+
    "\1\174\3\57\1\0\1\70\1\0\3\60\3\175\2\0"+
    "\1\61\1\176\6\0\1\176\15\0\1\177\5\0\1\200"+
    "\1\0\1\200\1\0\1\201\3\60\1\0\1\102\1\0"+
    "\6\60\2\0\1\202\36\0\1\203\45\0\1\204\5\0"+
    "\1\205\1\0\1\205\2\0\3\64\1\0\1\206\4\0"+
    "\3\74\2\0\1\73\1\74\6\0\1\74\15\0\1\65"+
    "\5\0\1\66\1\0\1\66\1\204\1\67\4\0\1\70"+
    "\4\0\3\74\2\0\1\73\1\74\6\0\1\74\26\0"+
    "\1\207\1\0\3\210\3\0\6\211\2\0\1\61\40\0"+
    "\3\212\3\0\6\213\36\0\1\214\1\0\1\214\1\215"+
    "\1\0\3\216\3\0\6\217\30\0\1\76\5\0\1\200"+
    "\1\0\1\200\1\0\1\220\3\71\1\0\1\102\1\0"+
    "\6\71\2\0\1\221\25\0\1\76\5\0\1\222\1\0"+
    "\1\222\1\0\1\220\3\223\1\0\1\102\1\0\6\71"+
    "\2\0\1\221\33\0\1\224\1\0\1\224\2\0\3\225"+
    "\41\0\1\76\5\0\1\200\1\0\1\200\1\0\1\220"+
    "\4\0\1\102\11\0\1\221\23\0\1\5\2\0\1\5"+
    "\3\0\2\5\1\0\3\5\3\226\3\0\6\226\2\5"+
    "\1\227\15\5\6\0\1\5\2\0\1\5\3\0\2\5"+
    "\1\0\3\5\3\230\3\0\6\230\20\5\6\0\1\5"+
    "\1\0\1\76\1\5\3\0\1\5\1\77\1\0\1\77"+
    "\1\5\1\100\3\101\1\0\1\102\1\0\6\101\2\5"+
    "\1\104\15\5\16\0\1\231\1\0\1\231\2\0\3\217"+
    "\3\0\6\217\26\0\1\5\1\0\1\76\1\5\3\0"+
    "\1\5\1\77\1\0\1\77\1\5\1\100\3\101\1\0"+
    "\1\102\1\0\6\101\2\5\1\104\7\5\1\114\5\5"+
    "\6\0\1\5\2\0\1\5\3\0\2\5\1\0\6\5"+
    "\3\0\3\5\1\114\22\5\6\0\1\5\1\0\1\76"+
    "\1\5\3\0\1\5\1\77\1\0\1\77\1\5\1\100"+
    "\3\101\1\0\1\102\1\0\6\101\1\232\1\5\1\104"+
    "\15\5\6\0\1\5\1\0\1\76\1\5\3\0\1\5"+
    "\1\77\1\0\1\77\1\5\1\100\3\101\1\0\1\102"+
    "\1\0\6\101\2\5\1\104\6\5\1\114\1\233\5\5"+
    "\6\0\1\5\1\0\1\76\1\5\3\0\1\5\1\77"+
    "\1\0\1\77\1\5\1\100\3\101\1\0\1\102\1\0"+
    "\6\101\2\5\1\104\6\5\1\114\6\5\6\0\1\5"+
    "\2\0\1\5\3\0\2\5\1\0\6\5\3\0\13\5"+
    "\1\234\12\5\6\0\1\5\2\0\1\5\3\0\2\5"+
    "\1\0\3\5\3\235\3\0\6\226\2\5\1\227\15\5"+
    "\6\0\1\5\1\0\1\76\1\5\3\0\1\5\1\77"+
    "\1\0\1\77\1\5\1\100\3\101\1\0\1\102\1\0"+
    "\5\101\1\236\2\5\1\104\1\237\14\5\6\0\1\5"+
    "\2\0\1\5\3\0\2\5\1\0\6\5\3\0\17\5"+
    "\1\240\6\5\6\0\1\5\2\0\1\5\3\0\2\5"+
    "\1\0\3\5\3\117\3\0\26\5\6\0\1\5\2\0"+
    "\1\5\3\0\2\5\1\0\6\5\3\0\12\5\1\241"+
    "\13\5\6\0\1\5\2\0\1\5\3\0\2\5\1\0"+
    "\6\5\3\0\13\5\1\242\5\5\1\243\4\5\6\0"+
    "\1\5\2\0\1\5\3\0\2\5\1\0\6\5\3\0"+
    "\20\5\1\244\5\5\6\0\1\5\2\0\1\5\3\0"+
    "\2\5\1\0\6\5\3\0\10\5\1\245\15\5\6\0"+
    "\1\5\2\0\1\5\3\0\2\5\1\0\6\5\3\0"+
    "\1\246\13\5\1\247\11\5\6\0\1\5\2\0\1\5"+
    "\3\0\2\5\1\0\6\5\3\0\21\5\1\250\4\5"+
    "\6\0\1\5\2\0\1\5\3\0\2\5\1\0\6\5"+
    "\3\0\17\5\1\244\6\5\6\0\1\5\2\0\1\5"+
    "\3\0\2\5\1\0\6\5\3\0\13\5\1\251\12\5"+
    "\35\0\1\252\67\0\1\253\45\0\1\254\3\0\1\254"+
    "\40\0\1\255\15\0\1\256\25\0\1\257\5\0\1\260"+
    "\1\0\1\260\1\0\1\261\1\135\3\0\1\262\64\0"+
    "\1\263\3\0\1\263\36\0\1\264\1\0\3\265\13\0"+
    "\1\266\40\0\3\267\41\0\1\270\5\0\1\271\1\0"+
    "\1\271\1\267\1\272\3\141\1\0\1\273\4\0\3\274"+
    "\3\0\1\274\6\0\1\274\37\0\1\254\1\0\1\263"+
    "\10\0\1\275\7\0\1\276\36\0\1\275\3\0\1\275"+
    "\40\0\2\277\14\0\1\300\25\0\1\301\5\0\1\302"+
    "\1\0\1\302\1\0\1\303\2\145\2\0\1\304\64\0"+
    "\1\276\3\0\1\276\40\0\3\305\3\0\6\305\2\0"+
    "\1\306\25\0\1\307\5\0\1\310\1\0\1\310\1\0"+
    "\1\311\3\150\1\0\1\312\1\0\6\150\27\0\1\51"+
    "\20\0\1\51\26\0\2\151\4\0\36\151\1\313\4\151"+
    "\1\314\5\151\10\0\1\315\5\0\1\316\1\0\1\316"+
    "\2\0\1\317\43\0\1\320\5\0\1\321\1\0\1\321"+
    "\1\322\1\0\3\55\41\0\1\323\5\0\1\321\1\0"+
    "\1\321\1\322\1\0\3\55\41\0\1\324\5\0\1\325"+
    "\1\0\1\325\2\0\2\326\42\0\1\327\5\0\1\330"+
    "\1\0\1\330\2\0\3\331\3\0\6\331\43\0\3\332"+
    "\41\0\1\333\5\0\1\166\1\0\1\166\1\332\1\334"+
    "\3\162\1\0\1\170\4\0\3\335\2\0\1\151\1\335"+
    "\6\0\1\335\26\0\1\151\45\0\1\336\5\0\1\166"+
    "\1\0\1\166\2\0\3\164\1\0\1\170\4\0\3\171"+
    "\3\0\1\171\6\0\1\171\15\0\1\165\5\0\1\166"+
    "\1\0\1\166\1\336\1\167\4\0\1\170\4\0\3\171"+
    "\3\0\1\171\6\0\1\171\26\0\1\337\1\0\3\340"+
    "\13\0\1\151\40\0\3\341\47\0\1\342\1\0\1\342"+
    "\1\343\1\0\3\344\47\0\1\345\1\0\1\345\2\0"+
    "\3\346\41\0\1\347\5\0\1\205\1\0\1\205\2\0"+
    "\3\172\1\0\1\206\4\0\3\176\2\0\1\61\1\176"+
    "\6\0\1\176\15\0\1\173\5\0\1\66\1\0\1\66"+
    "\1\347\1\174\4\0\1\70\4\0\3\176\2\0\1\61"+
    "\1\176\6\0\1\176\30\0\3\350\3\0\6\351\30\0"+
    "\1\177\5\0\1\352\1\0\1\352\1\0\1\201\3\353"+
    "\1\0\1\102\1\0\6\60\2\0\1\202\33\0\1\354"+
    "\1\0\1\354\2\0\3\355\41\0\1\177\5\0\1\200"+
    "\1\0\1\200\1\0\1\201\4\0\1\102\11\0\1\202"+
    "\40\0\3\211\3\0\6\211\2\0\1\202\40\0\3\351"+
    "\3\0\6\351\30\0\1\204\5\0\1\205\1\0\1\205"+
    "\6\0\1\206\4\0\3\74\2\0\1\73\1\74\6\0"+
    "\1\74\26\0\1\207\1\0\3\356\13\0\1\61\33\0"+
    "\1\357\1\0\1\357\1\215\1\0\3\360\54\0\3\361"+
    "\41\0\1\362\10\0\1\361\1\363\3\210\3\0\3\211"+
    "\3\364\2\0\1\61\1\365\6\0\1\365\15\0\1\366"+
    "\11\0\1\367\3\211\3\0\6\211\2\0\1\202\25\0"+
    "\1\370\5\0\1\66\1\0\1\66\2\0\3\212\1\0"+
    "\1\70\1\0\6\213\2\0\1\73\25\0\1\371\5\0"+
    "\1\200\1\0\1\200\2\0\3\213\1\0\1\102\1\0"+
    "\6\213\2\0\1\221\36\0\1\215\1\0\3\216\3\0"+
    "\6\217\43\0\3\372\41\0\1\373\10\0\1\372\1\374"+
    "\3\216\3\0\3\217\3\375\3\0\1\376\6\0\1\376"+
    "\15\0\1\377\11\0\1\u0100\3\217\3\0\6\217\43\0"+
    "\3\213\3\0\6\213\43\0\3\u0101\3\0\6\211\2\0"+
    "\1\202\25\0\1\76\5\0\1\66\1\0\1\66\1\0"+
    "\1\220\3\223\1\0\1\70\1\0\6\71\2\0\1\73"+
    "\40\0\3\225\47\0\1\205\1\0\1\205\2\0\3\225"+
    "\1\0\1\206\11\0\1\73\23\0\1\5\1\0\1\366"+
    "\1\5\3\0\2\5\1\0\2\5\1\u0102\3\226\3\0"+
    "\6\226\2\5\1\227\15\5\6\0\1\5\1\0\1\371"+
    "\1\5\3\0\1\5\1\77\1\0\1\77\2\5\3\230"+
    "\1\0\1\102\1\0\6\230\2\5\1\104\15\5\23\0"+
    "\3\217\3\0\6\217\26\0\1\5\2\0\1\5\3\0"+
    "\2\5\1\0\6\5\3\0\10\5\1\u0103\15\5\6\0"+
    "\1\5\2\0\1\5\3\0\2\5\1\0\6\5\3\0"+
    "\4\5\1\114\21\5\6\0\1\5\2\0\1\5\3\0"+
    "\2\5\1\0\6\5\3\0\3\5\1\114\14\5\1\114"+
    "\5\5\6\0\1\5\1\0\1\366\1\5\3\0\2\5"+
    "\1\0\2\5\1\u0102\3\235\3\0\6\226\2\5\1\227"+
    "\15\5\6\0\1\5\1\0\1\76\1\5\3\0\1\5"+
    "\1\77\1\0\1\77\1\5\1\100\3\101\1\0\1\102"+
    "\1\0\6\101\2\5\1\u0104\15\5\6\0\1\5\2\0"+
    "\1\5\3\0\2\5\1\0\6\5\3\0\1\u0105\25\5"+
    "\6\0\1\5\2\0\1\5\3\0\2\5\1\0\6\5"+
    "\3\0\12\5\1\u0106\13\5\6\0\1\5\2\0\1\5"+
    "\3\0\2\5\1\0\6\5\3\0\1\5\1\u0107\24\5"+
    "\6\0\1\5\2\0\1\5\3\0\2\5\1\0\6\5"+
    "\3\0\6\5\1\u0108\17\5\6\0\1\5\2\0\1\5"+
    "\3\0\1\114\1\5\1\0\1\u0109\5\5\3\0\17\5"+
    "\1\u010a\6\5\6\0\1\5\2\0\1\5\3\0\2\5"+
    "\1\0\6\5\3\0\21\5\1\114\4\5\6\0\1\5"+
    "\2\0\1\5\3\0\2\5\1\0\6\5\3\0\13\5"+
    "\1\u010b\12\5\6\0\1\5\2\0\1\5\3\0\2\5"+
    "\1\0\6\5\3\0\20\5\1\u010c\5\5\6\0\1\5"+
    "\2\0\1\5\3\0\2\5\1\0\6\5\3\0\21\5"+
    "\1\233\4\5\6\0\1\114\2\0\1\5\3\0\2\5"+
    "\1\0\6\5\3\0\26\5\6\0\1\5\2\0\1\5"+
    "\3\0\2\5\1\0\6\5\3\0\21\5\1\u010d\4\5"+
    "\54\0\1\u010e\33\0\1\u010f\43\0\1\134\1\0\1\134"+
    "\2\0\1\135\43\0\1\u0110\5\0\1\260\1\0\1\260"+
    "\1\0\1\u0111\1\255\3\0\1\262\11\0\1\256\25\0"+
    "\1\257\5\0\1\260\1\0\1\260\1\0\1\261\4\0"+
    "\1\262\52\0\1\u0112\15\0\1\256\40\0\1\u0113\51\0"+
    "\1\u0114\1\0\1\u0114\2\0\1\u0115\51\0\1\137\1\0"+
    "\1\137\1\140\1\0\3\141\54\0\3\u0116\41\0\1\u0117"+
    "\5\0\1\271\1\0\1\271\1\u0116\1\u0118\3\265\1\0"+
    "\1\273\4\0\3\u0119\2\0\1\266\1\u0119\6\0\1\u0119"+
    "\15\0\1\u011a\5\0\1\271\1\0\1\271\2\0\3\267"+
    "\1\0\1\273\4\0\3\274\3\0\1\274\6\0\1\274"+
    "\15\0\1\270\5\0\1\271\1\0\1\271\1\u011a\1\272"+
    "\4\0\1\273\4\0\3\274\3\0\1\274\6\0\1\274"+
    "\26\0\1\u011b\1\0\3\u011c\13\0\1\266\40\0\3\u011d"+
    "\47\0\1\u011e\1\0\1\u011e\1\u011f\1\0\3\u0120\47\0"+
    "\1\u0121\1\0\1\u0121\2\0\3\u0122\47\0\1\144\1\0"+
    "\1\144\2\0\2\145\50\0\1\147\1\0\1\147\2\0"+
    "\3\150\3\0\6\150\30\0\1\u0123\5\0\1\302\1\0"+
    "\1\302\1\0\1\u0124\2\277\2\0\1\304\11\0\1\300"+
    "\25\0\1\301\5\0\1\302\1\0\1\302\1\0\1\303"+
    "\4\0\1\304\52\0\2\u0125\14\0\1\300\40\0\2\u0126"+
    "\50\0\1\u0127\1\0\1\u0127\2\0\2\u0128\42\0\1\u0129"+
    "\5\0\1\310\1\0\1\310\1\0\1\u012a\3\305\1\0"+
    "\1\312\1\0\6\305\2\0\1\306\25\0\1\307\5\0"+
    "\1\310\1\0\1\310\1\0\1\311\4\0\1\312\52\0"+
    "\3\u012b\3\0\6\u012b\2\0\1\306\40\0\3\u012c\3\0"+
    "\6\u012c\36\0\1\u012d\1\0\1\u012d\2\0\3\u012e\3\0"+
    "\6\u012e\55\0\1\u012f\67\0\1\u0130\45\0\1\u0131\3\0"+
    "\1\u0131\40\0\1\u0132\15\0\1\151\25\0\1\u0133\5\0"+
    "\1\u0134\1\0\1\u0134\1\0\1\u0135\1\317\3\0\1\u0136"+
    "\64\0\1\u0137\3\0\1\u0137\40\0\3\164\63\0\1\u0131"+
    "\1\0\1\u0137\10\0\1\u0138\7\0\1\u0139\36\0\1\u0138"+
    "\3\0\1\u0138\40\0\2\u013a\14\0\1\151\25\0\1\u013b"+
    "\5\0\1\u013c\1\0\1\u013c\1\0\1\u013d\2\326\2\0"+
    "\1\u013e\64\0\1\u0139\3\0\1\u0139\40\0\3\u013f\3\0"+
    "\6\u013f\2\0\1\151\25\0\1\u0140\5\0\1\u0141\1\0"+
    "\1\u0141\1\0\1\u0142\3\331\1\0\1\u0143\1\0\6\331"+
    "\30\0\1\u0144\5\0\1\166\1\0\1\166\2\0\3\332"+
    "\1\0\1\170\4\0\3\335\2\0\1\151\1\335\6\0"+
    "\1\335\15\0\1\333\5\0\1\166\1\0\1\166\1\u0144"+
    "\1\334\4\0\1\170\4\0\3\335\2\0\1\151\1\335"+
    "\6\0\1\335\30\0\3\u0145\47\0\1\u0146\1\0\1\u0146"+
    "\2\0\3\u0147\41\0\1\336\5\0\1\166\1\0\1\166"+
    "\6\0\1\170\4\0\3\171\3\0\1\171\6\0\1\171"+
    "\30\0\3\u0148\41\0\1\u0149\10\0\1\u0148\1\u014a\3\340"+
    "\6\0\3\u014b\2\0\1\151\1\u014b\6\0\1\u014b\15\0"+
    "\1\u014c\5\0\1\166\1\0\1\166\2\0\3\341\1\0"+
    "\1\170\50\0\1\343\1\0\3\344\54\0\3\u014d\41\0"+
    "\1\u014e\10\0\1\u014d\1\u014f\3\344\6\0\3\u0150\3\0"+
    "\1\u0150\6\0\1\u0150\30\0\3\346\47\0\1\166\1\0"+
    "\1\166\2\0\3\346\1\0\1\170\37\0\1\347\5\0"+
    "\1\205\1\0\1\205\6\0\1\206\4\0\3\176\2\0"+
    "\1\61\1\176\6\0\1\176\15\0\1\u0151\5\0\1\66"+
    "\1\0\1\66\2\0\3\350\1\0\1\70\1\0\6\351"+
    "\2\0\1\61\25\0\1\u0152\5\0\1\200\1\0\1\200"+
    "\2\0\3\351\1\0\1\102\1\0\6\351\2\0\1\202"+
    "\40\0\3\u0153\3\0\6\211\2\0\1\202\25\0\1\177"+
    "\5\0\1\66\1\0\1\66\1\0\1\201\3\353\1\0"+
    "\1\70\1\0\6\60\2\0\1\61\40\0\3\355\47\0"+
    "\1\205\1\0\1\205\2\0\3\355\1\0\1\206\11\0"+
    "\1\61\25\0\1\u0154\10\0\1\361\1\u0155\3\356\6\0"+
    "\3\365\2\0\1\61\1\365\6\0\1\365\26\0\1\215"+
    "\1\0\3\360\41\0\1\u0156\10\0\1\372\1\u0157\3\360"+
    "\6\0\3\376\3\0\1\376\6\0\1\376\15\0\1\u0158"+
    "\12\0\3\361\6\0\3\365\2\0\1\61\1\365\6\0"+
    "\1\365\15\0\1\362\10\0\1\u0158\1\363\11\0\3\365"+
    "\2\0\1\61\1\365\6\0\1\365\30\0\3\u0159\3\0"+
    "\6\u015a\30\0\1\366\5\0\1\u015b\1\0\1\u015b\1\0"+
    "\1\367\3\u015c\3\0\6\211\2\0\1\202\33\0\1\u015b"+
    "\1\0\1\u015b\2\0\3\u015d\41\0\1\366\11\0\1\367"+
    "\16\0\1\202\40\0\3\u015a\3\0\6\u015a\30\0\1\370"+
    "\5\0\1\66\1\0\1\66\6\0\1\70\11\0\1\73"+
    "\25\0\1\371\5\0\1\200\1\0\1\200\6\0\1\102"+
    "\11\0\1\221\25\0\1\u015e\12\0\3\372\6\0\3\376"+
    "\3\0\1\376\6\0\1\376\15\0\1\373\10\0\1\u015e"+
    "\1\374\11\0\3\376\3\0\1\376\6\0\1\376\30\0"+
    "\3\u015f\3\0\6\u0160\30\0\1\377\5\0\1\u0161\1\0"+
    "\1\u0161\1\0\1\u0100\3\u0162\3\0\6\217\36\0\1\u0161"+
    "\1\0\1\u0161\2\0\3\u0163\41\0\1\377\11\0\1\u0100"+
    "\57\0\3\u0160\3\0\6\u0160\30\0\1\366\5\0\1\205"+
    "\1\0\1\205\1\0\1\367\3\u0101\1\0\1\206\1\0"+
    "\6\211\2\0\1\73\23\0\1\5\2\0\1\5\3\0"+
    "\2\5\1\0\3\5\3\u0164\3\0\6\u0164\20\5\6\0"+
    "\1\5\2\0\1\5\3\0\2\5\1\0\6\5\3\0"+
    "\13\5\1\114\12\5\6\0\1\5\2\0\1\5\3\0"+
    "\2\5\1\0\6\5\3\0\13\5\1\u0165\12\5\6\0"+
    "\1\5\2\0\1\5\3\0\2\5\1\0\6\5\3\0"+
    "\25\5\1\114\6\0\1\5\2\0\1\5\3\0\2\5"+
    "\1\0\6\5\3\0\1\244\25\5\6\0\1\5\2\0"+
    "\1\5\3\0\2\5\1\0\6\5\3\0\3\5\1\u0166"+
    "\22\5\6\0\1\5\2\0\1\5\3\0\2\5\1\0"+
    "\6\5\3\0\21\5\1\u0167\4\5\6\0\1\5\2\0"+
    "\1\5\3\0\2\5\1\0\6\5\3\0\20\5\1\u0168"+
    "\5\5\6\0\1\5\2\0\1\5\3\0\2\5\1\0"+
    "\6\5\3\0\4\5\1\u0169\21\5\6\0\1\5\2\0"+
    "\1\5\3\0\2\5\1\0\6\5\3\0\21\5\1\u016a"+
    "\4\5\6\0\1\5\2\0\1\5\3\0\2\5\1\0"+
    "\6\5\3\0\10\5\1\u016b\15\5\6\0\1\5\2\0"+
    "\1\5\3\0\2\5\1\0\6\5\3\0\1\u016c\25\5"+
    "\42\0\1\u016d\47\0\1\u016e\33\0\1\u0110\5\0\1\260"+
    "\1\0\1\260\1\0\1\u0111\4\0\1\262\11\0\1\256"+
    "\40\0\1\u016f\43\0\1\u0170\11\0\1\u0171\1\u0112\15\0"+
    "\1\256\25\0\1\u0172\5\0\1\260\1\0\1\260\2\0"+
    "\1\u0113\3\0\1\262\52\0\1\u0115\43\0\1\u0173\11\0"+
    "\1\u0174\1\u0115\43\0\1\u0175\5\0\1\271\1\0\1\271"+
    "\2\0\3\u0116\1\0\1\273\4\0\3\u0119\2\0\1\266"+
    "\1\u0119\6\0\1\u0119\15\0\1\u0117\5\0\1\271\1\0"+
    "\1\271\1\u0175\1\u0118\4\0\1\273\4\0\3\u0119\2\0"+
    "\1\266\1\u0119\6\0\1\u0119\30\0\3\u0176\47\0\1\u0177"+
    "\1\0\1\u0177\2\0\3\u0178\41\0\1\u011a\5\0\1\271"+
    "\1\0\1\271\6\0\1\273\4\0\3\274\3\0\1\274"+
    "\6\0\1\274\30\0\3\u0179\41\0\1\u017a\10\0\1\u0179"+
    "\1\u017b\3\u011c\6\0\3\u017c\2\0\1\266\1\u017c\6\0"+
    "\1\u017c\15\0\1\u017d\5\0\1\271\1\0\1\271\2\0"+
    "\3\u011d\1\0\1\273\50\0\1\u011f\1\0\3\u0120\54\0"+
    "\3\u017e\41\0\1\u017f\10\0\1\u017e\1\u0180\3\u0120\6\0"+
    "\3\u0181\3\0\1\u0181\6\0\1\u0181\30\0\3\u0122\47\0"+
    "\1\271\1\0\1\271\2\0\3\u0122\1\0\1\273\37\0"+
    "\1\u0123\5\0\1\302\1\0\1\302\1\0\1\u0124\4\0"+
    "\1\304\11\0\1\300\40\0\2\u0182\42\0\1\u0183\11\0"+
    "\1\u0184\2\u0125\14\0\1\300\25\0\1\u0185\5\0\1\302"+
    "\1\0\1\302\2\0\2\u0126\2\0\1\304\52\0\2\u0128"+
    "\42\0\1\u0186\11\0\1\u0187\2\u0128\42\0\1\u0129\5\0"+
    "\1\310\1\0\1\310\1\0\1\u012a\4\0\1\312\11\0"+
    "\1\306\40\0\3\u0188\3\0\6\u0188\30\0\1\u0189\11\0"+
    "\1\u018a\3\u012b\3\0\6\u012b\2\0\1\306\25\0\1\u018b"+
    "\5\0\1\310\1\0\1\310\2\0\3\u012c\1\0\1\312"+
    "\1\0\6\u012c\43\0\3\u012e\3\0\6\u012e\30\0\1\u018c"+
    "\11\0\1\u018d\3\u012e\3\0\6\u012e\74\0\1\u018e\33\0"+
    "\1\u018f\43\0\1\316\1\0\1\316\2\0\1\317\43\0"+
    "\1\u0190\5\0\1\u0134\1\0\1\u0134\1\0\1\u0191\1\u0132"+
    "\3\0\1\u0136\11\0\1\151\25\0\1\u0133\5\0\1\u0134"+
    "\1\0\1\u0134\1\0\1\u0135\4\0\1\u0136\52\0\1\u0192"+
    "\15\0\1\151\40\0\1\u0193\51\0\1\u0194\1\0\1\u0194"+
    "\2\0\1\u0195\51\0\1\321\1\0\1\321\1\322\1\0"+
    "\3\55\47\0\1\325\1\0\1\325\2\0\2\326\50\0"+
    "\1\330\1\0\1\330\2\0\3\331\3\0\6\331\30\0"+
    "\1\u0196\5\0\1\u013c\1\0\1\u013c\1\0\1\u0197\2\u013a"+
    "\2\0\1\u013e\11\0\1\151\25\0\1\u013b\5\0\1\u013c"+
    "\1\0\1\u013c\1\0\1\u013d\4\0\1\u013e\52\0\2\u0198"+
    "\14\0\1\151\40\0\2\u0199\50\0\1\u019a\1\0\1\u019a"+
    "\2\0\2\u019b\42\0\1\u019c\5\0\1\u0141\1\0\1\u0141"+
    "\1\0\1\u019d\3\u013f\1\0\1\u0143\1\0\6\u013f\2\0"+
    "\1\151\25\0\1\u0140\5\0\1\u0141\1\0\1\u0141\1\0"+
    "\1\u0142\4\0\1\u0143\52\0\3\u019e\3\0\6\u019e\2\0"+
    "\1\151\40\0\3\u019f\3\0\6\u019f\36\0\1\u01a0\1\0"+
    "\1\u01a0\2\0\3\u01a1\3\0\6\u01a1\30\0\1\u0144\5\0"+
    "\1\166\1\0\1\166\6\0\1\170\4\0\3\335\2\0"+
    "\1\151\1\335\6\0\1\335\15\0\1\u01a2\5\0\1\166"+
    "\1\0\1\166\2\0\3\u0145\1\0\1\170\11\0\1\151"+
    "\40\0\3\u0147\47\0\1\166\1\0\1\166\2\0\3\u0147"+
    "\1\0\1\170\11\0\1\151\25\0\1\u01a3\12\0\3\u0148"+
    "\6\0\3\u014b\2\0\1\151\1\u014b\6\0\1\u014b\15\0"+
    "\1\u0149\10\0\1\u01a3\1\u014a\11\0\3\u014b\2\0\1\151"+
    "\1\u014b\6\0\1\u014b\30\0\3\u01a4\47\0\1\u01a5\1\0"+
    "\1\u01a5\2\0\3\u01a6\41\0\1\u014c\5\0\1\166\1\0"+
    "\1\166\6\0\1\170\37\0\1\u01a7\12\0\3\u014d\6\0"+
    "\3\u0150\3\0\1\u0150\6\0\1\u0150\15\0\1\u014e\10\0"+
    "\1\u01a7\1\u014f\11\0\3\u0150\3\0\1\u0150\6\0\1\u0150"+
    "\30\0\3\u01a8\47\0\1\u01a9\1\0\1\u01a9\2\0\3\u01aa"+
    "\41\0\1\u0151\5\0\1\66\1\0\1\66\6\0\1\70"+
    "\11\0\1\61\25\0\1\u0152\5\0\1\200\1\0\1\200"+
    "\6\0\1\102\11\0\1\202\25\0\1\366\5\0\1\205"+
    "\1\0\1\205\1\0\1\367\3\u0153\1\0\1\206\1\0"+
    "\6\211\2\0\1\61\25\0\1\u0154\10\0\1\u0158\1\u0155"+
    "\11\0\3\365\2\0\1\61\1\365\6\0\1\365\30\0"+
    "\3\u01ab\41\0\1\u0156\10\0\1\u015e\1\u0157\11\0\3\376"+
    "\3\0\1\376\6\0\1\376\30\0\3\u01ac\41\0\1\u0158"+
    "\23\0\3\365\2\0\1\61\1\365\6\0\1\365\15\0"+
    "\1\u01ad\12\0\3\u0159\3\0\6\u015a\2\0\1\61\25\0"+
    "\1\u01ae\12\0\3\u015a\3\0\6\u015a\2\0\1\202\40\0"+
    "\3\u015d\41\0\1\366\11\0\1\367\3\u015c\3\0\6\211"+
    "\2\0\1\61\40\0\3\u015d\13\0\1\61\25\0\1\u015e"+
    "\23\0\3\376\3\0\1\376\6\0\1\376\15\0\1\u01af"+
    "\12\0\3\u015f\3\0\6\u0160\30\0\1\u01b0\12\0\3\u0160"+
    "\3\0\6\u0160\43\0\3\u0163\41\0\1\377\11\0\1\u0100"+
    "\3\u0162\3\0\6\217\26\0\1\5\1\0\1\u01ae\1\5"+
    "\3\0\2\5\1\0\3\5\3\u0164\3\0\6\u0164\2\5"+
    "\1\227\15\5\6\0\1\5\2\0\1\5\3\0\2\5"+
    "\1\0\6\5\3\0\4\5\1\u01b1\21\5\6\0\1\5"+
    "\2\0\1\5\3\0\2\5\1\0\6\5\3\0\1\114"+
    "\25\5\6\0\1\5\2\0\1\5\3\0\2\5\1\0"+
    "\6\5\3\0\7\5\1\114\16\5\6\0\1\5\2\0"+
    "\1\5\3\0\2\5\1\0\6\5\3\0\25\5\1\u01b2"+
    "\6\0\1\5\2\0\1\5\3\0\2\5\1\0\6\5"+
    "\3\0\2\5\1\u01b1\23\5\6\0\1\5\2\0\1\5"+
    "\3\0\2\5\1\0\6\5\3\0\11\5\1\u0103\14\5"+
    "\6\0\1\5\2\0\1\5\3\0\2\5\1\0\6\5"+
    "\3\0\16\5\1\u01b3\7\5\6\0\1\5\2\0\1\5"+
    "\3\0\2\5\1\0\6\5\3\0\24\5\1\u01b4\1\5"+
    "\41\0\1\u01b5\52\0\1\130\31\0\1\u01b6\5\0\1\260"+
    "\1\0\1\260\2\0\1\u016f\3\0\1\262\11\0\1\256"+
    "\25\0\1\u0170\11\0\1\u0171\16\0\1\256\40\0\1\u01b7"+
    "\43\0\1\u0172\5\0\1\260\1\0\1\260\6\0\1\262"+
    "\37\0\1\u0173\11\0\1\u0174\57\0\1\u01b8\43\0\1\u0175"+
    "\5\0\1\271\1\0\1\271\6\0\1\273\4\0\3\u0119"+
    "\2\0\1\266\1\u0119\6\0\1\u0119\15\0\1\u01b9\5\0"+
    "\1\271\1\0\1\271\2\0\3\u0176\1\0\1\273\11\0"+
    "\1\266\40\0\3\u0178\47\0\1\271\1\0\1\271\2\0"+
    "\3\u0178\1\0\1\273\11\0\1\266\25\0\1\u01ba\12\0"+
    "\3\u0179\6\0\3\u017c\2\0\1\266\1\u017c\6\0\1\u017c"+
    "\15\0\1\u017a\10\0\1\u01ba\1\u017b\11\0\3\u017c\2\0"+
    "\1\266\1\u017c\6\0\1\u017c\30\0\3\u01bb\47\0\1\u01bc"+
    "\1\0\1\u01bc\2\0\3\u01bd\41\0\1\u017d\5\0\1\271"+
    "\1\0\1\271\6\0\1\273\37\0\1\u01be\12\0\3\u017e"+
    "\6\0\3\u0181\3\0\1\u0181\6\0\1\u0181\15\0\1\u017f"+
    "\10\0\1\u01be\1\u0180\11\0\3\u0181\3\0\1\u0181\6\0"+
    "\1\u0181\30\0\3\u01bf\47\0\1\u01c0\1\0\1\u01c0\2\0"+
    "\3\u01c1\41\0\1\u01c2\5\0\1\302\1\0\1\302\2\0"+
    "\2\u0182\2\0\1\304\11\0\1\300\25\0\1\u0183\11\0"+
    "\1\u0184\16\0\1\300\40\0\2\u01c3\42\0\1\u0185\5\0"+
    "\1\302\1\0\1\302\6\0\1\304\37\0\1\u0186\11\0"+
    "\1\u0187\57\0\2\u01c4\42\0\1\u01c5\5\0\1\310\1\0"+
    "\1\310\2\0\3\u0188\1\0\1\312\1\0\6\u0188\2\0"+
    "\1\306\25\0\1\u0189\11\0\1\u018a\16\0\1\306\40\0"+
    "\3\u01c6\3\0\6\u01c6\30\0\1\u018b\5\0\1\310\1\0"+
    "\1\310\6\0\1\312\37\0\1\u018c\11\0\1\u018d\57\0"+
    "\3\u01c7\3\0\6\u01c7\62\0\1\u01c8\47\0\1\u01c9\33\0"+
    "\1\u0190\5\0\1\u0134\1\0\1\u0134\1\0\1\u0191\4\0"+
    "\1\u0136\11\0\1\151\40\0\1\u01ca\43\0\1\u01cb\11\0"+
    "\1\u01cc\1\u0192\15\0\1\151\25\0\1\u01cd\5\0\1\u0134"+
    "\1\0\1\u0134\2\0\1\u0193\3\0\1\u0136\52\0\1\u0195"+
    "\43\0\1\u01ce\11\0\1\u01cf\1\u0195\43\0\1\u0196\5\0"+
    "\1\u013c\1\0\1\u013c\1\0\1\u0197\4\0\1\u013e\11\0"+
    "\1\151\40\0\2\u01d0\42\0\1\u01d1\11\0\1\u01d2\2\u0198"+
    "\14\0\1\151\25\0\1\u01d3\5\0\1\u013c\1\0\1\u013c"+
    "\2\0\2\u0199\2\0\1\u013e\52\0\2\u019b\42\0\1\u01d4"+
    "\11\0\1\u01d5\2\u019b\42\0\1\u019c\5\0\1\u0141\1\0"+
    "\1\u0141\1\0\1\u019d\4\0\1\u0143\11\0\1\151\40\0"+
    "\3\u01d6\3\0\6\u01d6\30\0\1\u01d7\11\0\1\u01d8\3\u019e"+
    "\3\0\6\u019e\2\0\1\151\25\0\1\u01d9\5\0\1\u0141"+
    "\1\0\1\u0141\2\0\3\u019f\1\0\1\u0143\1\0\6\u019f"+
    "\43\0\3\u01a1\3\0\6\u01a1\30\0\1\u01da\11\0\1\u01db"+
    "\3\u01a1\3\0\6\u01a1\30\0\1\u01a2\5\0\1\166\1\0"+
    "\1\166\6\0\1\170\11\0\1\151\25\0\1\u01a3\23\0"+
    "\3\u014b\2\0\1\151\1\u014b\6\0\1\u014b\15\0\1\u01dc"+
    "\12\0\3\u01a4\13\0\1\151\40\0\3\u01a6\54\0\3\u01a6"+
    "\13\0\1\151\25\0\1\u01a7\23\0\3\u0150\3\0\1\u0150"+
    "\6\0\1\u0150\15\0\1\u01dd\12\0\3\u01a8\54\0\3\u01aa"+
    "\41\0\1\u01ad\12\0\3\u01ab\13\0\1\61\25\0\1\u01af"+
    "\12\0\3\u01ac\41\0\1\u01ad\30\0\1\61\25\0\1\u01ae"+
    "\30\0\1\202\25\0\1\u01af\56\0\1\u01b0\54\0\1\5"+
    "\2\0\1\5\3\0\2\5\1\0\1\u0109\5\5\3\0"+
    "\26\5\6\0\1\5\2\0\1\5\3\0\2\5\1\0"+
    "\6\5\3\0\13\5\1\u01de\12\5\6\0\1\5\2\0"+
    "\1\5\3\0\2\5\1\0\6\5\3\0\22\5\1\u01df"+
    "\3\5\6\0\1\5\2\0\1\5\3\0\2\5\1\0"+
    "\1\u01e0\5\5\3\0\26\5\44\0\1\u016e\22\0\1\u01b6"+
    "\5\0\1\260\1\0\1\260\6\0\1\262\11\0\1\256"+
    "\25\0\1\u01e1\12\0\1\u01b7\15\0\1\256\25\0\1\u01e2"+
    "\12\0\1\u01b8\43\0\1\u01b9\5\0\1\271\1\0\1\271"+
    "\6\0\1\273\11\0\1\266\25\0\1\u01ba\23\0\3\u017c"+
    "\2\0\1\266\1\u017c\6\0\1\u017c\15\0\1\u01e3\12\0"+
    "\3\u01bb\13\0\1\266\40\0\3\u01bd\54\0\3\u01bd\13\0"+
    "\1\266\25\0\1\u01be\23\0\3\u0181\3\0\1\u0181\6\0"+
    "\1\u0181\15\0\1\u01e4\12\0\3\u01bf\54\0\3\u01c1\41\0"+
    "\1\u01c2\5\0\1\302\1\0\1\302\6\0\1\304\11\0"+
    "\1\300\25\0\1\u01e5\12\0\2\u01c3\14\0\1\300\25\0"+
    "\1\u01e6\12\0\2\u01c4\42\0\1\u01c5\5\0\1\310\1\0"+
    "\1\310\6\0\1\312\11\0\1\306\25\0\1\u01e7\12\0"+
    "\3\u01c6\3\0\6\u01c6\2\0\1\306\25\0\1\u01e8\12\0"+
    "\3\u01c7\3\0\6\u01c7\61\0\1\u01e9\52\0\1\151\31\0"+
    "\1\u01ea\5\0\1\u0134\1\0\1\u0134\2\0\1\u01ca\3\0"+
    "\1\u0136\11\0\1\151\25\0\1\u01cb\11\0\1\u01cc\16\0"+
    "\1\151\40\0\1\u01eb\43\0\1\u01cd\5\0\1\u0134\1\0"+
    "\1\u0134\6\0\1\u0136\37\0\1\u01ce\11\0\1\u01cf\57\0"+
    "\1\u01ec\43\0\1\u01ed\5\0\1\u013c\1\0\1\u013c\2\0"+
    "\2\u01d0\2\0\1\u013e\11\0\1\151\25\0\1\u01d1\11\0"+
    "\1\u01d2\16\0\1\151\40\0\2\u01ee\42\0\1\u01d3\5\0"+
    "\1\u013c\1\0\1\u013c\6\0\1\u013e\37\0\1\u01d4\11\0"+
    "\1\u01d5\57\0\2\u01ef\42\0\1\u01f0\5\0\1\u0141\1\0"+
    "\1\u0141\2\0\3\u01d6\1\0\1\u0143\1\0\6\u01d6\2\0"+
    "\1\151\25\0\1\u01d7\11\0\1\u01d8\16\0\1\151\40\0"+
    "\3\u01f1\3\0\6\u01f1\30\0\1\u01d9\5\0\1\u0141\1\0"+
    "\1\u0141\6\0\1\u0143\37\0\1\u01da\11\0\1\u01db\57\0"+
    "\3\u01f2\3\0\6\u01f2\30\0\1\u01dc\30\0\1\151\25\0"+
    "\1\u01dd\54\0\1\5\2\0\1\5\3\0\2\5\1\0"+
    "\6\5\3\0\21\5\1\u01f3\4\5\6\0\1\5\2\0"+
    "\1\5\3\0\2\5\1\0\6\5\3\0\14\5\1\247"+
    "\11\5\6\0\1\5\2\0\1\5\3\0\2\5\1\0"+
    "\6\5\3\0\17\5\1\u01f4\6\5\10\0\1\u01e1\30\0"+
    "\1\256\25\0\1\u01e2\56\0\1\u01e3\30\0\1\266\25\0"+
    "\1\u01e4\56\0\1\u01e5\30\0\1\300\25\0\1\u01e6\56\0"+
    "\1\u01e7\30\0\1\306\25\0\1\u01e8\112\0\1\u01c9\22\0"+
    "\1\u01ea\5\0\1\u0134\1\0\1\u0134\6\0\1\u0136\11\0"+
    "\1\151\25\0\1\u01dc\12\0\1\u01eb\15\0\1\151\25\0"+
    "\1\u01dd\12\0\1\u01ec\43\0\1\u01ed\5\0\1\u013c\1\0"+
    "\1\u013c\6\0\1\u013e\11\0\1\151\25\0\1\u01dc\12\0"+
    "\2\u01ee\14\0\1\151\25\0\1\u01dd\12\0\2\u01ef\42\0"+
    "\1\u01f0\5\0\1\u0141\1\0\1\u0141\6\0\1\u0143\11\0"+
    "\1\151\25\0\1\u01dc\12\0\3\u01f1\3\0\6\u01f1\2\0"+
    "\1\151\25\0\1\u01dd\12\0\3\u01f2\3\0\6\u01f2\26\0"+
    "\1\5\2\0\1\5\3\0\2\5\1\0\6\5\3\0"+
    "\1\u01f5\25\5\6\0\1\5\2\0\1\5\3\0\2\5"+
    "\1\0\6\5\3\0\22\5\1\u01f6\3\5\6\0\1\5"+
    "\2\0\1\5\3\0\2\5\1\0\6\5\3\0\24\5"+
    "\1\114\1\5\6\0\1\5\2\0\1\5\3\0\2\5"+
    "\1\0\6\5\3\0\11\5\1\u01f7\14\5\6\0\1\5"+
    "\2\0\1\5\3\0\2\5\1\0\6\5\3\0\4\5"+
    "\1\u01f8\21\5\6\0\1\5\2\0\1\5\3\0\2\5"+
    "\1\0\6\5\3\0\20\5\1\114\5\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22372];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\11\5\1\2\11\22\1\1\0\1\11\1\0"+
    "\1\11\1\0\3\1\1\11\3\1\2\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\11\1\1\1\0\2\1\3\0"+
    "\2\1\1\11\1\0\5\1\1\0\25\1\1\11\2\1"+
    "\2\0\1\1\3\0\1\1\3\0\1\1\2\0\1\1"+
    "\1\11\10\0\1\1\1\0\2\1\4\0\2\1\1\0"+
    "\1\1\1\0\1\1\2\0\2\11\1\1\5\0\2\1"+
    "\2\0\2\1\1\0\1\11\1\0\1\1\1\0\4\1"+
    "\1\0\20\1\2\0\2\1\1\11\1\1\3\0\1\1"+
    "\1\0\1\1\1\11\2\1\4\0\3\1\1\11\1\1"+
    "\3\0\1\1\1\11\1\1\3\0\2\1\2\0\1\1"+
    "\6\0\1\1\2\0\3\1\2\0\1\1\2\0\1\1"+
    "\2\0\1\1\1\0\4\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\7\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\0\15\1\2\0\1\1\2\0\1\1\1\0\3\1"+
    "\2\0\1\1\2\0\1\1\2\0\1\1\1\0\2\1"+
    "\2\0\1\1\1\0\2\1\2\0\1\1\1\0\1\1"+
    "\3\0\2\1\6\0\2\1\3\0\2\1\3\0\2\1"+
    "\1\0\1\1\4\0\3\1\2\0\3\1\2\0\1\1"+
    "\7\0\3\1\1\0\13\1\2\0\1\1\2\0\2\1"+
    "\1\0\2\1\1\0\1\1\4\0\3\1\2\0\1\1"+
    "\2\0\2\1\1\0\1\1\2\0\2\1\3\0\1\1"+
    "\2\0\1\1\1\0\2\1\2\0\1\1\1\0\2\1"+
    "\2\0\1\1\1\0\2\1\4\0\2\1\1\0\1\1"+
    "\1\0\1\1\2\0\6\1\1\0\1\1\1\0\2\1"+
    "\4\0\2\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\2\0\1\1\2\0\2\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\2\0\2\1\2\0\4\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\2\1\1\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[504];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
	/* Add any variable declaration if necessary */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SchemeScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("TOKEN [TYPE:PREFIX10; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 36: break;
          case 2:
            { System.out.println("TOKEN [TYPE:STRING_CHARACTER; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 37: break;
          case 3:
            { 
            }
            // fall through
          case 38: break;
          case 4:
            { System.out.println("TOKEN [TYPE:IDENTIFIER; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 39: break;
          case 5:
            { System.out.print(yytext());
            }
            // fall through
          case 40: break;
          case 6:
            { System.out.println("TOKEN [TYPE:QUOTATION_MARK; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 41: break;
          case 7:
            { System.out.println("TOKEN [TYPE:OPEN_PAREN; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 42: break;
          case 8:
            { System.out.println("TOKEN [TYPE:CLOSE_PAREN; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 43: break;
          case 9:
            { System.out.println("TOKEN [TYPE:SIGN; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 44: break;
          case 10:
            { System.out.println("TOKEN [TYPE:UNQUOTATION_MARK; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 45: break;
          case 11:
            { System.out.println("TOKEN [TYPE:DOTTER_PAIR_MARKER; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 46: break;
          case 12:
            { System.out.println("TOKEN [TYPE:UINTEGER10; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 47: break;
          case 13:
            { System.out.println("TOKEN [TYPE:UINTEGER16; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 48: break;
          case 14:
            { System.out.println("TOKEN [TYPE:IMAG10; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 49: break;
          case 15:
            { System.out.println("TOKEN [TYPE:EXPONENT_MARKER; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 50: break;
          case 16:
            { System.out.println("TOKEN [TYPE:STRING; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 51: break;
          case 17:
            { System.out.println("TOKEN [TYPE:OPEN_VECTOR; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 52: break;
          case 18:
            { System.out.println("TOKEN [TYPE:PREFIX2; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 53: break;
          case 19:
            { System.out.println("TOKEN [TYPE:BOOLEAN; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 54: break;
          case 20:
            { System.out.println("TOKEN [TYPE:PREFIX8; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 55: break;
          case 21:
            { System.out.println("TOKEN [TYPE:PREFIX16; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 56: break;
          case 22:
            { System.out.println("TOKEN [TYPE:ABBREVIATION; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 57: break;
          case 23:
            { System.out.println("TOKEN [TYPE:REAL10; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 58: break;
          case 24:
            { System.out.println("TOKEN [TYPE:IMAG16; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 59: break;
          case 25:
            { System.out.println("TOKEN [TYPE:COMPLEX10; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 60: break;
          case 26:
            { System.out.println("TOKEN [TYPE:UREAL10; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 61: break;
          case 27:
            { System.out.println("TOKEN [TYPE:KEYWORD; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 62: break;
          case 28:
            { System.out.println("TOKEN [TYPE:SUFFIX; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 63: break;
          case 29:
            { System.out.println("TOKEN [TYPE:CHARACTER; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 64: break;
          case 30:
            { System.out.println("TOKEN [TYPE:NUM2; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 65: break;
          case 31:
            { System.out.println("TOKEN [TYPE:NUM10; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 66: break;
          case 32:
            { System.out.println("TOKEN [TYPE:NUM8; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 67: break;
          case 33:
            { System.out.println("TOKEN [TYPE:NUM16; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 68: break;
          case 34:
            { System.out.println("TOKEN [TYPE:COMPLEX16; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 69: break;
          case 35:
            { System.out.println("TOKEN [TYPE:UREAL16; TEXT:'" + yytext() + "'; LINE:" + yyline + "; COLUMN:" +  yycolumn + "]");
            }
            // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java SchemeScanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        SchemeScanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new SchemeScanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
